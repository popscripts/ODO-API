generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model OpenDay {
  id        Int         @id @default(autoincrement())
  active    Boolean     @default(true)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  Classroom Classroom[]
  Info      Info[]
  Key       Key[]
  Order     Order[]
  User      User[]
}

model AccountType {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(16)
  User User[]
}

model Classroom {
  id           Int       @id @default(autoincrement())
  openDay      OpenDay   @relation(fields: [openDayId], references: [id])
  openDayId    Int
  classroom    String    @db.VarChar(128)
  managedBy    User?     @relation("managed", fields: [managedById], references: [id])
  managedById  Int?      @unique
  title        String    @db.VarChar(128)
  description  String    @db.VarChar(500)
  status       Status    @relation(fields: [statusId], references: [id])
  statusId     Int       @default(1)
  reservedBy   Group?    @relation(name: "reserved", fields: [reservedById], references: [id])
  reservedById Int?      @unique
  reservedAt   DateTime?
  takenBy      Group?    @relation(name: "taken", fields: [takenById], references: [id])
  takenById    Int?      @unique
  takenAt      DateTime?
  deleted      Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Info {
  id        Int      @id @default(autoincrement())
  openDay   OpenDay  @relation(fields: [openDayId], references: [id])
  openDayId Int
  content   String
  deleted   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Key {
  id        Int      @id @default(autoincrement())
  openDay   OpenDay  @relation(fields: [openDayId], references: [id])
  openDayId Int
  key       Int      @unique
  expired   Boolean  @default(false)
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id          Int      @id @default(autoincrement())
  openDay     OpenDay  @relation(fields: [openDayId], references: [id])
  openDayId   Int
  dish        Dish     @relation(fields: [dishId], references: [id])
  dishId      Int
  amount      Int
  comment     String?  @db.VarChar(255)
  status      Status   @relation(fields: [statusId], references: [id])
  statusId    Int      @default(4)
  orderedBy   User     @relation("orders", fields: [orderedById], references: [id])
  orderedById Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Status {
  id        Int         @id @default(autoincrement())
  name      String      @db.VarChar(16)
  Order     Order[]
  Classroom Classroom[]
}

model User {
  id               Int         @id @default(autoincrement())
  openDay          OpenDay     @relation(fields: [openDayId], references: [id])
  openDayId        Int
  accountType      AccountType @relation(fields: [accountTypeId], references: [id])
  accountTypeId    Int         @default(2)
  username         String      @unique @db.VarChar(64)
  password         String      @db.VarChar(255)
  name             String?     @db.VarChar(64)
  Group            Group?      @relation(fields: [groupId], references: [id])
  groupId          Int?
  pictureName      String?     @db.VarChar(255)
  active           Boolean     @default(true)
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  Order            Order[]     @relation("orders")
  ManagedClassroom Classroom?  @relation("managed")
  Socket           Socket?
}

model Group {
  id           Int        @id @default(autoincrement())
  groupSize    Int?
  description  String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  Reserved     Classroom? @relation("reserved")
  Taken        Classroom? @relation("taken")
  GroupMembers User[]
}

model Dish {
  id     Int     @id @default(autoincrement())
  name   String  @db.VarChar(64)
  cheese Boolean @default(false)
  ham    Boolean @default(false)
  Order  Order[]
}

model Socket {
  id        String  @unique
  User      User?   @relation(fields: [userId], references: [id])
  userId    Int?    @unique
  connected Boolean @default(false)
}
